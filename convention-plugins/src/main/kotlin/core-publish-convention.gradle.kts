/*
 * Created by Paydock on 1/26/24, 6:24 PM
 * Copyright (c) 2024 Paydock Ltd.
 *
 * Last modified 1/26/24, 2:24 PM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id("org.gradle.maven-publish")
}

// artifact
val groupName: String by project
val versionName: String by project
val libraryName: String by project
// developers
val developerId: String by project
val developerName: String by project
val developerEmail: String by project
val developerOrganisation: String by project
val developerOrganisationUrl: String by project
 project
val projectGithubUrl: String by project
val projectDescription: String by project

// This creates a task called `sourcesJar`. It subclasses `Jar`, which is a
// task that knows how to copy files into a .jar file. The block after it is
// called the configuration, which tells the task what it should do when run.
val sourcesJar = tasks.register("sourcesJar", Jar::class) {
    // archiveClassifier lets us specify that this is an auxilary file (in
    // addition to the main file we're producing, which is a .aar file). It
    // has the effect of adding -sources at the end of the filename.
    archiveClassifier.set("sources")
//    from(sourceSets["main"].allSource)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// This takes the Javadoc files generated by `javadoc` and bundles them into
// a single .jar file.
val javadocJar = tasks.register("javadocJar", Jar::class) {
    // All of this should be self-explanatory from the previous tasks.
    archiveClassifier.set("javadoc")
}

publishing {
    publications {
        // This says: defer this block until all of the other stuff has run first.
        // This is required since components["release"] is generated by the Android
        // plugin in `afterEvaluate` itself, which forces us to do the same.
        afterEvaluate {
            // Create a new publication called "release". The maven-publish plugin
            // creates tasks named publish${name}PublicationTo${target}, where
            // ${name} is a capitalized form of the name and ${target} is an output
            // repository. By default a MavenLocal target is automatically added,
            // which outputs to ~/.m2/repository.
            create<MavenPublication>("release") {
                // Include all artifacts from the "release" component. This is the
                // .aar file itself.
                from(components["release"])

                // Include the -sources.jar and -javadoc.jar files that we defined
                // earlier.
//                artifact(sourcesJar)
                artifact(javadocJar)

                // Here we configure some properties of the publication (these are
                // automatically applied to the pom file).
                groupId = groupName
                artifactId = libraryName
                version = versionName

                // And here are some more properties that go into the pom file.
                pom {
                    packaging = "aar"
                    name.set(project.name)
                    description.set(projectDescription)
                    url.set(projectGithubUrl)
                    licenses {
                        license {
                            name.set("The Apache License, Version 2.0")
                            distribution.set("repo")
                            url.set("https://www.apache.org/licenses/LICENSE-2.0")
                        }
                    }
                    developers {
                        developer {
                            id.set(developerId)
                            name.set(developerName)
                            email.set(developerEmail)
                            organization.set(developerOrganisation)
                            organizationUrl.set(developerOrganisationUrl)
                        }
                    }
                    scm {
                        url.set(pom.url.get())
                        connection.set("scm:git:${url.get()}.git")
                        developerConnection.set("scm:git:${url.get()}.git")
                    }
                }
            }
        }
    }
}