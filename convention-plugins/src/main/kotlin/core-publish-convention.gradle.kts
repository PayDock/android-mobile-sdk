plugins {
    id("maven-publish")
}

// artifact (from module build.gradle)
val groupName: String by project
val versionName: String by project
// artifact (from module build.gradle)
val libraryName: String by project
// project info (from module build.gradle)
val projectGithubUrl: String by project
val projectDescription: String by project
// developers (from gradle.properties)
val developerId: String by project
val developerName: String by project
val developerEmail: String by project
val developerOrganisation: String by project
val developerOrganisationUrl: String by project

group = groupName
version = versionName

afterEvaluate {

    // This takes the Javadoc files generated by `javadoc` and bundles them into
    // a single .jar file.
    val javadocJar = tasks.register("javadocJar", Jar::class) {
        // All of this should be self-explanatory from the previous tasks.
        archiveClassifier.set("javadoc")
    }

    publishing {
        publications {
            // This says: defer this block until all of the other stuff has run first.
            // This is required since components["release"] is generated by the Android
            // plugin in `afterEvaluate` itself, which forces us to do the same.
            afterEvaluate {
                // Create a new publication called "release". The maven-publish plugin
                // creates tasks named publish${name}PublicationTo${target}, where
                // ${name} is a capitalized form of the name and ${target} is an output
                // repository. By default a MavenLocal target is automatically added,
                // which outputs to ~/.m2/repository.
                create<MavenPublication>("release") {
                    // Include all artifacts from the available component component. This is the
                    // .aar file itself.
                    // Include the selected component
                    from(components["release"])

                    // Include the -javadoc.jar files that we defined earlier.
                    artifact(javadocJar)

                    // Here we configure some properties of the publication (these are
                    // automatically applied to the pom file).
                    groupId = groupName
                    artifactId = libraryName
                    version = versionName

                    // And here are some more properties that go into the pom file.
                    pom {
                        packaging = "aar"
                        name.set(project.name)
                        description.set(projectDescription)
                        url.set(projectGithubUrl)
                        licenses {
                            license {
                                name.set("All Rights Reserved")
                                distribution.set("repo")
                            }
                        }
                        developers {
                            developer {
                                id.set(developerId)
                                name.set(developerName)
                                email.set(developerEmail)
                                organization.set(developerOrganisation)
                                organizationUrl.set(developerOrganisationUrl)
                            }
                        }
                        scm {
                            url.set(pom.url.get())
                            connection.set("scm:git:${url.get()}.git")
                            developerConnection.set("scm:git:${url.get()}.git")
                        }
                    }
                }
            }
        }
    }
}

// Task to print the version name used for pipeline
tasks.register("printVersionName") {
    doLast {
        println(versionName)
    }
}