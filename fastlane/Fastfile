# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do

    desc "Builds the debug code"
    lane :buildDebug do
        gradle(task: "clean assembleDebug")
    end

    desc "Builds the release code"
    lane :buildRelease do
        gradle(task: "assembleRelease")
    end

    desc "Runs all the tests"
    lane :test do
        gradle(task: "test")
    end

    desc "Creates and pushes a tag on GitLab"
    lane :tag_release do
        result = gradle(task: "-q :mobile-sdk:printVersionName", print_command: false, print_command_output: true)

        # Extract version number using a regular expression
        version_match = result.match(/(\d+\.\d+\.\d+)/) # Match a pattern like "1.0.0"
        version_name = version_match[1] if version_match

        # Configure Git user (if needed)
        sh("git config --global user.email \"ricardo.dasilva@paydock.com\"")
        sh("git config --global user.name \"Ricardo\"")

        # Create and push the tag
        sh("git tag -a #{version_name} -m \"Release version #{version_name}\"")

        # Use the GITLAB_TOKEN environment variable for authentication
        git_url_with_token = "https://gitlab-ci-token:#{ENV['GITLAB_TOKEN']}@gitlab.com/paydock/bounded-contexts/mobile/mobile-sdk-android.git"
        sh("git remote set-url origin #{git_url_with_token}")

        # Push the tag to the remote repository
        sh("git push origin #{version_name}")
    end

    desc "Creates a release on GitHub"
    lane :create_github_release do
        # Extract version name from tag (assuming tags are in the format "v1.0.0")
        version_name = sh("git describe --tags --abbrev=0").strip

        require 'octokit'

        # Authenticate with GitHub (assuming GITHUB_TOKEN is set in your CI/CD variables)
        # Set up Octokit client
        client = Octokit::Client.new(access_token: ENV['GITHUB_TOKEN'])

        # Create a release on GitHub
        repo = 'PayDock/android-mobile-sdk' # Replace with your GitHub repository
        release_name = "v#{version_name}"
        release_body = "**Full Changelog**: https://github.com/PayDock/android-mobile-sdk/commits/#{version_name}"

        release = client.create_release(repo, "#{version_name}", {
          tag_name: "#{version_name}",
          name: release_name,
          body: release_body,
          is_generate_release_notes: true,
          make_latest: 'true'
        })
    end

    desc "Publishes the SDK to GitHub Packages"
    lane :publish_to_github do
        gradle(task: ":mobile-sdk:publishAllPublicationsToGitHubPackagesRepository")
    end
end